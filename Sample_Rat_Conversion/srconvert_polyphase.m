%%% DSP Project 1: Sample Rate Conversion 
% Lamiah Khan, Megan Vo, and Lindsey Rodriguez 
% All sources that are utilized has been linked below.
% SPDX-License-Identifier: GPL-3.0-or-later
clc; clear; close all;

%% Intilizing polyphase variables
% Reads audio file
x = audioread('Wagner.wav'); 
% Tests polyphase filters
y1 = srconvert_poly([1 zeros(1, 3000)]); 
% Filter specs vars
verify(y1); 
y2 = srconvert_poly(x); 
% Writes to an output audio file
audiowrite('outputPolyphase.wav', y2, 24000); 

%% Function for polyphase 
function y1 = srconvert_poly(in)
% Initializing vars
   a = upSample1;
   b = upSample2;
   x1 = in;
   % split filter into taps 
   a1 = poly1(a.numerator, 2);
   b1 = poly1(b.numerator, 5);

   % apply 6 polyphase filters upsampling of 2 each. 
   for i = 1:6
       tap1 = fftfilt(a1(1,:), x1);
       tap2 = fftfilt(a1(2,:), x1);
       x_a = upsample(tap1, 2);
       x_b = upsample(tap2, 2, 1);
       % adding up polyphase 
       x1 = x_a + x_b; 
   end 

    % polyphase upsample through a up 5 fir filter, once. 
    % cVar = accumulator variable
    cVar = 0;
    for i = 1:5
        tap3 = fftfilt(b1(i,:),x1);
        tempX = upsample(tap3,5,i-1);
        cVar = cVar + tempX;
    end
    y1 = 147 * downsample(cVar, 147);
end

%% Filter Design Function 1: Upsampling Pt1
function Hd = upSample1
% MATLAB Code
% Generated by MATLAB(R) 24.2 and Signal Processing Toolbox 24.2.
% Generated on: 12-Oct-2024 14:02:38
% Equiripple Lowpass filter designed using the FIRPM function.

% All frequency values are normalized to 1.

Fpass = 0.5;               % Passband Frequency
Fstop = 0.6;               % Stopband Frequency
Dpass = 0.0017563991496;   % Passband Ripple
Dstop = 0.000011622776602;  % Stopband Attenuation
dens  = 20;                % Density Factor

% Calculate the order from the parameters using FIRPMORD.
[N, Fo, Ao, W] = firpmord([Fpass, Fstop], [1 0], [Dpass, Dstop]);

% Calculate the coefficients using the FIRPM function.
b  = firpm(N, Fo, Ao, W, {dens});
Hd = dfilt.dffir(b);

% [EOF]
end
%% Filter Design Function 1: Upsampling Pt2
function Hd = upSample2
% MATLAB Code
% Generated by MATLAB(R) 24.2 and Signal Processing Toolbox 24.2.
% Generated on: 12-Oct-2024 14:41:15

% Equiripple Lowpass filter designed using the FIRPM function.

% All frequency values are normalized to 1.

Fpass = 0.2;               % Passband Frequency
Fstop = 0.24;              % Stopband Frequency
Dpass = 0.0017563991496;   % Passband Ripple
Dstop = 0.000031622776602;   % Stopband Attenuation
dens  = 20;                % Density Factor

% Calculate the order from the parameters using FIRPMORD.
[N, Fo, Ao, W] = firpmord([Fpass, Fstop], [1 0], [Dpass, Dstop]);

% Calculate the coefficients using the FIRPM function.
b  = firpm(N, Fo, Ao, W, {dens});
Hd = dfilt.dffir(b);

% [EOF]
end

%% Filter Design Function 1: Upsampling Pt2
function Hd = downSample1
% MATLAB Code
% Generated by MATLAB(R) 24.2 and Signal Processing Toolbox 24.2.
% Generated on: 12-Oct-2024 17:16:27

% Equiripple Lowpass filter designed using the FIRPM function.

% All frequency values are normalized to 1.

Fpass = 0.14285714286;     % Passband Frequency
Fstop = 0.17142857143;     % Stopband Frequency
Dpass = 0.0017563991496;   % Passband Ripple
Dstop = 0.00031622776602;  % Stopband Attenuation
dens  = 20;                % Density Factor

% Calculate the order from the parameters using FIRPMORD.
[N, Fo, Ao, W] = firpmord([Fpass, Fstop], [1 0], [Dpass, Dstop]);

% Calculate the coefficients using the FIRPM function.
b  = firpm(N, Fo, Ao, W, {dens});
Hd = dfilt.dffir(b);

% [EOF]
end

%% Filter Design Function 1: Upsampling Pt2
function Hd = downSample2
% MATLAB Code
% Generated by MATLAB(R) 24.2 and Signal Processing Toolbox 24.2.
% Generated on: 12-Oct-2024 18:19:22

% Equiripple Lowpass filter designed using the FIRPM function.

% All frequency values are normalized to 1.

Fpass = 0.33333333333;     % Passband Frequency
Fstop = 0.4;               % Stopband Frequency
Dpass = 0.0017563991496;   % Passband Ripple
Dstop = 0.00031622776602;  % Stopband Attenuation
dens  = 20;                % Density Factor

% Calculate the order from the parameters using FIRPMORD.
[N, Fo, Ao, W] = firpmord([Fpass, Fstop], [1 0], [Dpass, Dstop]);

% Calculate the coefficients using the FIRPM function.
b  = firpm(N, Fo, Ao, W, {dens});
Hd = dfilt.dffir(b);

% [EOF]
end