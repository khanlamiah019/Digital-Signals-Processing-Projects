%%% DSP Project 1: Sample Rate Conversion 
% Lamiah Khan, Megan Vo, and Lindsey Rodriguez 
% All sources that are utilized has been linked below.
% SPDX-License-Identifier: GPL-3.0-or-later
clc; clear; close all;
% Multistage Decomposition 

%% Generates & displays an impulse response figure for verification
figure;
fprintf('Impulse ');
yss = srconvert([1 zeros(1,3000)]);
verify(yss);

% Processes audio file "Wagner.wav" to change sample rate
fprintf('Wagner ');
filename = 'Wagner.wav';
[snd, fs] = audioread(filename);
fprintf('Original Audio Sample Rate: %d Hz\n', fs);

% target sample rate and convert the audio to this rate
outputSR = 24000;
fprintf('Wagner ');
outputAudio = srconvert(snd);
soundsc(outputAudio, outputSR);
audiowrite('outputAudio.wav', outputAudio, outputSR);

% checks frequency of the new audio file
[outSignal, fout] = audioread('outputAudio.wav');
fprintf('Converted Audio Sample Rate: %d Hz\n', fout);

%% The following function verifies that audio file's sample rate has been updated correctly
function [out] = srconvert(in)
    upSample = 320; % upsampling & downsampling factors given in class
    downSample = 147;
    upFact = factor(upSample);
    downFact = factor(downSample);
    uniqueFact = unique([upFact, downFact]); % stores unique prime factors of upsampling& downsampling rates
    % Storage for filter coefficients
    % Credits: https://www.mathworks.com/help/matlab/ref/containers.map.html
    coefficients_array = containers.Map('KeyType', 'double', 'ValueType', 'any');

    % Credits: https://www.mathworks.com/matlabcentral/answers/447469-looping-through-a-matrix-of-unknown-dimensions
    for index = 1:length((uniqueFact))
        n = uniqueFact(index);
        coefficients_array(n) = project1_filter(n).Numerator;
    end
    
    sampled = in;

    % For the next two loops, system applies upsampling & downsampling respectively
    % by each factor, and applies a filter after each step
    for i = 1:length((upFact))
        L = upFact(i);
        sampled = upsample(sampled, L);
        sampled = fftfilt(coefficients_array(L), sampled);
    end
    % Downsampling section
    for i = 1:length((downFact))
        M = downFact(i);
        sampled = fftfilt(coefficients_array(M)*M, sampled);
        sampled = downsample(sampled, M);
    end
    
    out = sampled;
end

%% Function to generate a lowpass filter with the given factor n
function Hd = project1_filter(n)
% MATLAB Code
% Generated by MATLAB(R) 24.2 and Signal Processing Toolbox 24.2.
% Generated on: 10-Oct-2024 11:23:44
% All frequency values are normalized to 1.
Fpass = 1/n;    % Passband Frequency
Fstop = 1.2/n;  % Stopband Frequency
Dpass = 0.00001;% Passband Ripple 
Dstop = 0.0001; % Stopband Attenuation 
dens  = 20;     % Density Factor

% Calculating order from the parameters using FIRPMORD.
[N, Fo, Ao, W] = firpmord([Fpass, Fstop], [1 0], [Dpass, Dstop]);

% Calculating coefficients using the FIRPM function.
b  = firpm(N, Fo, Ao, W, {dens});
Hd = dfilt.dffir(b);

end